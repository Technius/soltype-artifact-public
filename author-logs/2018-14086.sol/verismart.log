ON: integer over/underflow
ON: division-by-zero

2018-14086_tmp.sol:5:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function owned() {
    ^ (Relevant source part starts here and spans across multiple lines).
2018-14086_tmp.sol:10:34: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (msg.sender != owner) throw;
                                 ^---^
2018-14086_tmp.sol:39:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function MyToken(
    ^ (Relevant source part starts here and spans across multiple lines).
2018-14086_tmp.sol:56:44: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
            if (frozenAccount[msg.sender]) throw;
                                           ^---^
2018-14086_tmp.sol:57:45: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough
                                            ^---^
2018-14086_tmp.sol:58:55: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows
                                                      ^---^
2018-14086_tmp.sol:86:43: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
            if (balanceOf[this] < amount) throw;               // checks if it has enough to sell
                                          ^---^
2018-14086_tmp.sol:94:50: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
            if (balanceOf[msg.sender] < amount ) throw;        // checks if the sender has enough to sell
                                                 ^---^
2018-14086_tmp.sol:2:1: Warning: Source file does not specify required compiler version!Consider adding "pragma solidity ^0.4.26;"
contract owned {
^ (Relevant source part starts here and spans across multiple lines).
2018-14086_tmp.sol:60:52: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
        if(_to.balance<minBalanceForAccounts)      _to.send(sell((minBalanceForAccounts-_to.balance)/sellPrice));
                                                   ^-----------------------------------------------------------^
2018-14086_tmp.sol:63:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place
        ^-------------------------------^
2018-14086_tmp.sol:70:13: Warning: Invoking events without "emit" prefix is deprecated.
            Transfer(0, owner, mintedAmount);
            ^------------------------------^
2018-14086_tmp.sol:71:13: Warning: Invoking events without "emit" prefix is deprecated.
            Transfer(owner, target, mintedAmount);
            ^-----------------------------------^
2018-14086_tmp.sol:76:13: Warning: Invoking events without "emit" prefix is deprecated.
            FrozenFunds(target, freeze);
            ^-------------------------^
2018-14086_tmp.sol:89:13: Warning: Invoking events without "emit" prefix is deprecated.
            Transfer(this, msg.sender, amount);                // execute an event reflecting the change
            ^--------------------------------^
2018-14086_tmp.sol:98:13: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
            msg.sender.send(revenue);                          // sends ether to the seller
            ^----------------------^
2018-14086_tmp.sol:99:13: Warning: Invoking events without "emit" prefix is deprecated.
            Transfer(msg.sender, this, amount);                // executes an event reflecting on the change
            ^--------------------------------^
2018-14086_tmp.sol:5:5: Warning: No visibility specified. Defaulting to "public". 
    function owned() {
    ^ (Relevant source part starts here and spans across multiple lines).
2018-14086_tmp.sol:14:5: Warning: No visibility specified. Defaulting to "public". 
    function transferOwnership(address newOwner) onlyOwner {
    ^ (Relevant source part starts here and spans across multiple lines).
2018-14086_tmp.sol:39:5: Warning: No visibility specified. Defaulting to "public". 
    function MyToken(
    ^ (Relevant source part starts here and spans across multiple lines).
2018-14086_tmp.sol:55:5: Warning: No visibility specified. Defaulting to "public". 
    function transfer(address _to, uint256 _value) {
    ^ (Relevant source part starts here and spans across multiple lines).
2018-14086_tmp.sol:67:9: Warning: No visibility specified. Defaulting to "public". 
        function mintToken(address target, uint256 mintedAmount) onlyOwner {
        ^ (Relevant source part starts here and spans across multiple lines).
2018-14086_tmp.sol:74:9: Warning: No visibility specified. Defaulting to "public". 
        function freezeAccount(address target, bool freeze) onlyOwner {
        ^ (Relevant source part starts here and spans across multiple lines).
2018-14086_tmp.sol:79:9: Warning: No visibility specified. Defaulting to "public". 
        function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {
        ^ (Relevant source part starts here and spans across multiple lines).
2018-14086_tmp.sol:84:9: Warning: No visibility specified. Defaulting to "public". 
        function buy() returns (uint amount){
        ^ (Relevant source part starts here and spans across multiple lines).
2018-14086_tmp.sol:85:22: Warning: "msg.value" used in non-payable function. Do you want to add the "payable" modifier to this function?
            amount = msg.value / buyPrice;                     // calculates the amount
                     ^-------^
2018-14086_tmp.sol:93:9: Warning: No visibility specified. Defaulting to "public". 
        function sell(uint amount) returns (uint revenue){
        ^ (Relevant source part starts here and spans across multiple lines).
2018-14086_tmp.sol:104:9: Warning: No visibility specified. Defaulting to "public". 
        function setMinBalance(uint minimumBalanceInFinney) onlyOwner {
        ^ (Relevant source part starts here and spans across multiple lines).
- all funcs : 21
- reachable : 14
* Generating Paths ... took 9.8e-05s
- paths : 31

Iter : 10 To explore : 308 Explored : 317 Total elapsed : 270.030528
Iter : 20 To explore : 579 Explored : 598 Total elapsed : 271.246051
Iter : 30 To explore : 864 Explored : 893 Total elapsed : 275.675194
Iter : 40 To explore : 1059 Explored : 2029 Total elapsed : 322.185982
Iter : 50 To explore : 1167 Explored : 2147 Total elapsed : 509.253412
=== Report ===
[1] [IO] line 58, (balanceOf[_to] + _value) : unproven
[2] [IO] line 59, (minBalanceForAccounts - msg.sender.balance) : proven
[3] [IO] line 60, (minBalanceForAccounts - _to.balance) : proven
[4] [IO] line 61, (balanceOf[msg.sender] - _value) : unproven
[5] [IO] line 62, (balanceOf[_to] + _value) : unproven
[6] [IO] line 68, (balanceOf[target] + mintedAmount) : unproven
[7] [IO] line 69, (totalSupply + mintedAmount) : unproven
[8] [IO] line 87, (balanceOf[msg.sender] + amount) : unproven
[9] [IO] line 88, (balanceOf[this] - amount) : unproven
[10] [IO] line 95, (balanceOf[this] + amount) : unproven
[11] [IO] line 96, (balanceOf[msg.sender] - amount) : unproven
[12] [IO] line 97, (amount * sellPrice) : unproven
[13] [IO] line 105, (minimumBalanceInFinney * 1000000000000000) : unproven
[14] [DZ] line 59, ((minBalanceForAccounts - msg.sender.balance) / sellPrice) : unproven
[15] [DZ] line 60, ((minBalanceForAccounts - _to.balance) / sellPrice) : unproven
[16] [DZ] line 85, (msg.value / buyPrice) : unproven

=== Result Summary ===
# Queries                : 16
- integer over/underflow : 13
- division-by-zero       : 3
- assertion              : 0

# Alarms                 : 14
- integer over/underflow : 11
- division-by-zero       : 3
- assertion              : 0

# Proven                 : 2
- integer over/underflow : 2
- division-by-zero       : 0
- assertion              : 0

Time Elapsed : 540.363976
